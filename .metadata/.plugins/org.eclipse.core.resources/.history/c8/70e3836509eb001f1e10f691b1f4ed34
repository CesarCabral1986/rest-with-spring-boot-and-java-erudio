package com.example.demo;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.exceptions.UnsuporthedMathOperationException;

import calculations.MathCalculations;

@RestController
public class MathController {

	private final AtomicLong counter = new AtomicLong();
	MathCalculations maths = new MathCalculations();
		

	@RequestMapping(value = "/sum/{numberOne}/{numberTwo}", method = RequestMethod.GET)
	public Double sum(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo			

	)  throws Exception {
		
		return maths.sum(numberOne, numberTwo);

	}
	
	@RequestMapping(value = "/sub/{numberOne}/{numberTwo}", method = RequestMethod.GET)
	public Double sub(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo

	)  throws Exception {
		
		if(!isNumeric(numberOne) || !isNumeric(numberTwo) ) {
			
			throw new UnsuporthedMathOperationException("Please set a numeric value!");
			
		}
		
		return convertToDouble(numberOne) - convertToDouble(numberTwo);

	}
	
	@RequestMapping(value = "/mult/{numberOne}/{numberTwo}", method = RequestMethod.GET)
	public Double mult(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo

	)  throws Exception {
		
		if(!isNumeric(numberOne) || !isNumeric(numberTwo) ) {
			
			throw new UnsuporthedMathOperationException("Please set a numeric value!");
			
		}
		
		return convertToDouble(numberOne) * convertToDouble(numberTwo) ;

	}
	
	@RequestMapping(value = "/div/{numberOne}/{numberTwo}", method = RequestMethod.GET)
	public Double div(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo

	)  throws Exception {
		
		if(!isNumeric(numberOne) || !isNumeric(numberTwo) ) {
			
			throw new UnsuporthedMathOperationException("Please set a numeric value!");
			
		}
		
		return convertToDouble(numberOne) / convertToDouble(numberTwo) ;

	}
	
	@RequestMapping(value = "/med/{numberOne}/{numberTwo}/{numberThree}", method = RequestMethod.GET)
	public Double med(
			@PathVariable(value = "numberOne") String numberOne,
			@PathVariable(value = "numberTwo") String numberTwo,
			@PathVariable(value = "numberThree") String numberThree

	)  throws Exception {
		
		if(!isNumeric(numberOne) || !isNumeric(numberTwo) ) {
			
			throw new UnsuporthedMathOperationException("Please set a numeric value!");
			
		}
		
		return (convertToDouble(numberOne) + convertToDouble(numberTwo)	+ convertToDouble(numberThree)) / 3;

	}
	
	@RequestMapping(value = "/square/{numberOne}", method = RequestMethod.GET)
	public Double square(
			@PathVariable(value = "numberOne") String numberOne			

	)  throws Exception {
		
		if(!isNumeric(numberOne)) {
			
			throw new UnsuporthedMathOperationException("Please set a numeric value!");
			
		}
		
		return Math.sqrt(convertToDouble(numberOne));

	}

	private Double convertToDouble(String strNumber) {
		if(strNumber == null) return 0D;		
		String number = strNumber.replaceAll(",", ".");
		if (isNumeric(number)) return Double.parseDouble(number);
		return 0D;
	}

	private boolean isNumeric(String strNumber) {
		
		if(strNumber == null) return false;
		String number = strNumber.replaceAll(",", ".");
		return number.matches("[-+]?[0-9]*\\.?[0-9]+");
		

	}

}
